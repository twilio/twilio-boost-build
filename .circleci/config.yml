version: 2.1

parameters:
  xcode-version:
    description: Xcode version for iOS and Darwin builds
    type: string
    default: "12.5.1"

  twilio-video-sdk-toolchain-image:
    description: twilio-video-sdk-toolchain docker image to use for linux and android
    type: string
    default: "twilio/twilio-video-sdk-toolchain:17"

aliases:
  - &workspace
    ~/twilio-boost-build

  - ignore-master: &ignore-master
      filters:
        tags:
          only: /.*/
        branches:
          ignore: /^master/

  - only-release-tags: &only-release-tags
      filters:
        tags:
          only: /^release-.*/
        branches:
          ignore: /.*/

  - platform-parameter: &platform-parameter
      platform:
        description: "Platform to build"
        type: enum
        enum: ["headers", "android", "linux", "linux-cxx11-abi-disabled", "ios", "osx"]

  - boost-libs-parameter: &boost-libs-parameter
      boost-libs:
        description: "List of boost libraries to build"
        type: string
        # We removed serialization as we need to be able to build for iOS 9 and there are code that is using iOS 10+ features
        default: "atomic context coroutine date_time exception iostreams program_options random regex system test thread"

  - pre-steps-parameter: &pre-steps-parameter
      pre-steps:
        description: "Steps that will be executed before build starts"
        type: steps
        default: []

  - post-steps-parameter: &post-steps-parameter
      post-steps:
        description: "Steps that will be executed after build ends"
        type: steps
        default: []

  - build-steps-parameter: &build-steps-parameter
      build-steps:
        description: "Steps that will be executed as main build target"
        type: steps

executors:
  linux-executor:
    parameters:
      resource-class:
        type: enum
        enum: [small, medium, medium+, large, xlarge]
        default: medium+
    docker:
      - image: << pipeline.parameters.twilio-video-sdk-toolchain-image >>
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    resource_class: << parameters.resource-class >>
    working_directory: *workspace
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2

  mac-executor:
    macos:
      xcode: << pipeline.parameters.xcode-version >>
    resource_class: macos.x86.medium.gen2
    working_directory: *workspace

commands:
  generate_build_settings:
    description: "Generate build env variables"
    steps:
      - run:
          name: Make env variables from build tag
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "Must use release tag to build boost releases. Push \`release-1.71.0-twilio3\`-style tag to trigger."
              touch $BASH_ENV
            else
              echo 'export BOOST_VERSION=$(echo $CIRCLE_TAG | cut -d - -f 2)' >> $BASH_ENV
              echo 'export TWILIO_SUFFIX=$(echo $CIRCLE_TAG | cut -d - -f 3)' >> $BASH_ENV
            fi

  prepare_macos_ios:
    description: "Prepare environment for MacOS and iOS builds"
    steps:
      - run:
          name: "Install necessary components through Homebrew"
          command: |
            brew update
            brew install maven
            brew install boost-bcp
            brew install rsync

  unpack:
    description: "Unpack boost tarball"
    steps:
      - checkout
      - generate_build_settings
      - run:
          name: Unpack tarball
          command: |
            source $BASH_ENV
            ./boost.sh --unpack `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX`
          no_output_timeout: 120m
      - persist_to_workspace:
          root: .
          paths:
            - src/*

  build:
    description: "Build and Publish"
    parameters:
      <<: [*platform-parameter, *boost-libs-parameter, *pre-steps-parameter]
    steps:
      - checkout
      - steps: << parameters.pre-steps >>
      - attach_workspace:
          at: *workspace
      - generate_build_settings
      - run:
          name: Build << parameters.platform >>
          command: |
            source $BASH_ENV
            ./boost.sh -<< parameters.platform >> --no-clean --no-unpack --no-framework `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX` --boost-libs "<< parameters.boost-libs >>"
          no_output_timeout: 120m
      - persist_to_workspace:
          root: .
          paths:
            - target/*
      - store_artifacts:
           path: target/distributions

jobs:
  unpack-sources:
    executor:
      name: linux-executor
      resource-class: small
    steps:
      - run:
          name: apt install
          command: |
            apt-get -y update
            apt-get -y --no-install-recommends install libboost-tools-dev
      - unpack

  build-on-linux:
    parameters:
      platform:
        type: enum
        enum: [ headers, linux, linux-cxx11-abi-disabled, android ]
    executor:
      name: linux-executor
      resource-class: medium+
    steps:
      - build:
          platform: << parameters.platform >>

  build-on-mac:
    parameters:
      platform:
        type: enum
        enum: [ osx, ios ]
    executor: mac-executor
    steps:
      - build:
          platform: << parameters.platform >>
          pre-steps:
            - prepare_macos_ios

  deploy-artifactory:
    description: "Deploy binaries to artifactory"
    executor:
      name: linux-executor
      resource-class: small
    parameters:
      <<: *boost-libs-parameter
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - generate_build_settings
      - run: #generate_maven_settings
          name: Generate Maven settings
          command: echo "$ARTIFACTORY_SETTINGS" | base64 --decode > artifactory-settings.xml
      - run:
          name: Deploy binaries to artifactory
          no_output_timeout: 120m
          command: |
            source $BASH_ENV
            ./boost.sh --no-clean --no-unpack --no-framework --deploy `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX` --boost-libs "<< parameters.boost-libs >>"

workflows:
  build-and-deploy:
    jobs:
      - unpack-sources:
          <<: *ignore-master
          name: unpack
          context: dockerhub-pulls

      - build-on-linux:
          <<: *ignore-master
          name: build-boost-<< matrix.platform >>
          context: dockerhub-pulls
          requires:
            - unpack
          matrix:
            parameters:
              platform: [ headers, linux, linux-cxx11-abi-disabled, android ]

      - build-on-mac:
          <<: *ignore-master
          name: build-boost-<< matrix.platform >>
          requires:
            - unpack
          matrix:
            parameters:
              platform: [ ios, osx ]

      - deploy-artifactory:
          <<: *only-release-tags
          name: deploy
          context: dockerhub-pulls
          requires:
            - build-on-linux
            - build-on-mac
