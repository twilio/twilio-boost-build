version: 2.1

aliases:
  - &workspace
    ~/twilio-boost-build
  - &build_output
    ~/twilio-boost-build/target/output
  - ignore-master: &ignore-master
      filters:
        tags:
          only: /.*/
        branches:
          ignore: /^master/
  - only-release-tags: &only-release-tags
      filters:
        tags:
          only: /^release-.*/
        branches:
          ignore: /.*/
  - platform-parameter: &platform-parameter
      platform:
        description: "Platform to build"
        type: enum
        enum: ["headers", "android", "linux", "linux-cxx11-abi-disabled", "ios", "osx"]
  - boost-libs-parameter: &boost-libs-parameter
      boost-libs:
        description: "List of boost libraries to build"
        type: string
        default: "atomic container context coroutine date_time exception iostreams program_options random regex serialization system test thread"
  - pre-steps-parameter: &pre-steps-parameter
      pre-steps:
        description: "Steps that will be executed before build starts"
        type: steps
        default: []
  - post-steps-parameter: &post-steps-parameter
      post-steps:
        description: "Steps that will be executed after build ends"
        type: steps
        default: []
  - build-steps-parameter: &build-steps-parameter
      build-steps:
        description: "Steps that will be executed as main build target"
        type: steps

executors:
  linux-executor:
    docker:
      - image: cibuilderbot/docker-circleci-linux-android
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    resource_class: xlarge
    working_directory: *workspace
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  android-executor:
    docker:
      - image: twilio/twilio-video-sdk-toolchain:13
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD
    resource_class: xlarge
    working_directory: *workspace
    environment:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
  macos-ios-executor:
    macos:
      xcode: "12.2.0"
    resource_class: large
    working_directory: *workspace

commands:
  generate_build_settings:
    description: "Generate build env variables"
    steps:
      - run:
          name: Make env variables from build tag
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "Must use release tag to build boost releases. Push \`release-1.71.0-twilio3\`-style tag to trigger."
              # Remove this 
              echo 'export BOOST_VERSION=1.73.0' >> $BASH_ENV
              # ^^^^^^^^^^^
              touch $BASH_ENV
            else
              echo 'export BOOST_VERSION=$(echo $CIRCLE_TAG | cut -d - -f 2)' >> $BASH_ENV
              echo 'export TWILIO_SUFFIX=$(echo $CIRCLE_TAG | cut -d - -f 3)' >> $BASH_ENV
            fi

  prepare_macos_ios:
    description: "Prepare environment for MacOS and iOS builds (cache enabled)"
    parameters:
      cache-tag:
        description: "Cache tag"
        type: string
    steps:
      - restore_cache:
          keys:
            - v4-homebrew-<< parameters.cache-tag >>-{{ checksum ".circleci/config.yml" }}
      - run:
          name: "Install necessary components through Homebrew"
          command: |
            brew update
            brew install maven
            brew install boost-bcp
            brew install rsync
      - save_cache:
          key: v4-homebrew-<< parameters.cache-tag >>-{{ checksum ".circleci/config.yml" }}
          paths:
            - /usr/local/Homebrew

  unpack:
    description: "Unpack boost tarball"
    steps:
      - checkout
      - generate_build_settings
      - run:
          name: Unpack tarball
          command: |
            source $BASH_ENV
            ./boost.sh --unpack `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX`
          no_output_timeout: 120m
      - persist_to_workspace:
          root: .
          paths:
            - src/*

  build:
    description: "Build and Publish"
    parameters:
      <<: *platform-parameter
      <<: *boost-libs-parameter
      <<: *pre-steps-parameter
    steps:
      - checkout
      - steps: << parameters.pre-steps >>
      - attach_workspace:
          at: *workspace
      - generate_build_settings
      - run:
          name: Build << parameters.platform >>
          command: |
            source $BASH_ENV
            ./boost.sh -<< parameters.platform >> --no-clean --no-unpack --no-framework `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX` --boost-libs "<< parameters.boost-libs >>"
          no_output_timeout: 120m
      - persist_to_workspace:
          root: .
          paths:
            - target/*
      - store_artifacts:
           path: target/distributions

jobs:
  unpack-sources:
    executor: linux-executor
    steps:
      - run:
          name: apt install
          command: apt -y --no-install-recommends install libboost-tools-dev rsync
      - unpack

  build-headers:
    executor: linux-executor
    steps:
      - build:
          platform: headers

  build-linux:
    executor: linux-executor
    steps:
      - build:
          platform: linux

  build-linux-cxx11-abi-disabled:
    executor: linux-executor
    steps:
      - build:
          platform: linux-cxx11-abi-disabled

  build-android:
    executor: android-executor
    steps:
      - build:
          platform: android

  build-osx:
    executor: macos-ios-executor
    steps:
      - build:
          platform: osx
          pre-steps:
            - prepare_macos_ios:
                cache-tag: xcode12

  build-ios:
    executor: macos-ios-executor
    steps:
      - build:
          platform: ios
          pre-steps:
            - prepare_macos_ios:
                cache-tag: xcode12

  deploy-bintray:
    executor: linux-executor
    description: "Deploy binaries to bintray"
    parameters:
      <<: *boost-libs-parameter
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - generate_build_settings
      - run: #generate_maven_settings
          name: Generate Maven settings
          command: echo "$BINTRAY_SETTINGS" | base64 --decode > bintray-settings.xml
      - run:
          name: Deploy binaries to bintray
          command: |
            source $BASH_ENV
            ./boost.sh --no-clean --no-unpack --no-framework --deploy `test -n "${BOOST_VERSION:-}" && echo --boost-version $BOOST_VERSION` \
              `test -n "${TWILIO_SUFFIX:-}" && echo --twilio-suffix -$TWILIO_SUFFIX` --boost-libs "<< parameters.boost-libs >>"
          no_output_timeout: 120m

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - unpack-sources:
          <<: *ignore-master
          name: unpack
      - build-headers:
          <<: *ignore-master
          name: build-boost-headers
          requires:
            - unpack
      # - build-android:
      #     <<: *ignore-master
      #     name: build-boost-android
      #     requires:
      #       - unpack
      # - build-linux:
      #     <<: *ignore-master
      #     name: build-boost-linux
      #     requires:
      #       - unpack
      # - build-linux-cxx11-abi-disabled:
      #     <<: *ignore-master
      #     name: build-boost-linux-cxx11-abi-disabled
      #     requires:
      #       - unpack
      - build-ios:
          <<: *ignore-master
          name: build-boost-ios
          requires:
            - unpack
      - build-osx:
          <<: *ignore-master
          name: build-boost-osx
          requires:
            - unpack
      - deploy-bintray:
          <<: *only-release-tags
          name: deploy
          requires:
            - build-boost-headers
            # - build-boost-android
            # - build-boost-linux
            # - build-boost-linux-cxx11-abi-disabled
            - build-boost-ios
            - build-boost-osx
