Backporting fixes for when a received deflate block spans multiple multi_byte character arrays.
Reference: https://github.com/boostorg/beast/pull/2191
--- a/1.73.0/boost/beast/websocket/impl/read.hpp	2021-03-17 15:42:22.000000000 -0700
+++ b/1.73.0/boost/beast/websocket/impl/read.hpp	2021-03-17 15:49:42.000000000 -0700
@@ -471,6 +471,7 @@
                         zs.avail_out = out.size();
                         BOOST_ASSERT(zs.avail_out > 0);
                     }
+                    bool fin = false;
                     if(impl.rd_remain > 0)
                     {
                         if(impl.rd_buf.size() > 0)
@@ -494,18 +495,7 @@
                             empty_block[4] = { 0x00, 0x00, 0xff, 0xff };
                         zs.next_in = empty_block;
                         zs.avail_in = sizeof(empty_block);
-                        impl.inflate(zs, zlib::Flush::sync, ec);
-                        if(! ec)
-                        {
-                            // https://github.com/madler/zlib/issues/280
-                            if(zs.total_out > 0)
-                                ec = error::partial_deflate_block;
-                        }
-                        if(impl.check_stop_now(ec))
-                            goto upcall;
-                        impl.do_context_takeover_read(impl.role);
-                        impl.rd_done = true;
-                        break;
+                        fin = true;
                     }
                     else
                     {
@@ -514,6 +504,15 @@
                     impl.inflate(zs, zlib::Flush::sync, ec);
                     if(impl.check_stop_now(ec))
                         goto upcall;
+                    if (fin) {
+                        if (zs.total_out == 0) {
+                            impl.do_context_takeover_read(impl.role);
+                            impl.rd_done = true;
+                            break;
+                        } else {
+                            printf("-> partial_deflate_block %lu <-\n", zs.total_out);
+                        }
+                    }
                     if(impl.rd_msg_max && beast::detail::sum_exceeds(
                         impl.rd_size, zs.total_out, impl.rd_msg_max))
                     {
@@ -524,8 +523,10 @@
                     }
                     cb_.consume(zs.total_out);
                     impl.rd_size += zs.total_out;
-                    impl.rd_remain -= zs.total_in;
-                    impl.rd_buf.consume(zs.total_in);
+                    if (!fin) {
+                        impl.rd_remain -= zs.total_in;
+                        impl.rd_buf.consume(zs.total_in);
+                    }
                     bytes_written_ += zs.total_out;
                 }
                 if(impl.rd_op == detail::opcode::text)
@@ -1165,6 +1166,7 @@
                 zs.avail_out = out.size();
                 BOOST_ASSERT(zs.avail_out > 0);
             }
+            bool fin = false;
             if(impl.rd_remain > 0)
             {
                 if(impl.rd_buf.size() > 0)
@@ -1212,18 +1214,7 @@
                         0x00, 0x00, 0xff, 0xff };
                 zs.next_in = empty_block;
                 zs.avail_in = sizeof(empty_block);
-                impl.inflate(zs, zlib::Flush::sync, ec);
-                if(! ec)
-                {
-                    // https://github.com/madler/zlib/issues/280
-                    if(zs.total_out > 0)
-                        ec = error::partial_deflate_block;
-                }
-                if(impl.check_stop_now(ec))
-                    return bytes_written;
-                impl.do_context_takeover_read(impl.role);
-                impl.rd_done = true;
-                break;
+                fin = true;
             }
             else
             {
@@ -1232,6 +1223,15 @@
             impl.inflate(zs, zlib::Flush::sync, ec);
             if(impl.check_stop_now(ec))
                 return bytes_written;
+            if (fin) {
+                if (zs.total_out == 0) {
+                    impl.do_context_takeover_read(impl.role);
+                    impl.rd_done = true;
+                    break;
+                } else {
+                    printf("-> partial_deflate_block %lu <-\n", zs.total_out);
+                }
+            }
             if(impl.rd_msg_max && beast::detail::sum_exceeds(
                 impl.rd_size, zs.total_out, impl.rd_msg_max))
             {
@@ -1241,8 +1241,10 @@
             }
             cb.consume(zs.total_out);
             impl.rd_size += zs.total_out;
-            impl.rd_remain -= zs.total_in;
-            impl.rd_buf.consume(zs.total_in);
+            if (!fin) {
+                impl.rd_remain -= zs.total_in;
+                impl.rd_buf.consume(zs.total_in);
+            }
             bytes_written += zs.total_out;
         }
         if(impl.rd_op == detail::opcode::text)
